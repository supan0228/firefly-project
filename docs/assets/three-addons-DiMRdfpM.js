import{R as tt,P as st,E as it,V as d,M as j,T as k,Q as Se,S as Pe,a as f,b as ot,O as at,c as rt,B as nt,F as De,d as z,U as ne,W as G,H as q,N as lt,C as ct,e as J,A as ut,f as ht}from"./three-Mz5QLVbz.js";const Re={type:"change"},re={type:"start"},Ae={type:"end"},W=new tt,Oe=new st,ft=Math.cos(70*ot.DEG2RAD);class vt extends it{constructor(s,r){super(),this.object=s,this.domElement=r,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new d,this.cursor=new d,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:j.ROTATE,MIDDLE:j.DOLLY,RIGHT:j.PAN},this.touches={ONE:k.ROTATE,TWO:k.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return n.phi},this.getAzimuthalAngle=function(){return n.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(t){t.addEventListener("keydown",oe),this._domElementKeyEvents=t},this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",oe),this._domElementKeyEvents=null},this.saveState=function(){e.target0.copy(e.target),e.position0.copy(e.object.position),e.zoom0=e.object.zoom},this.reset=function(){e.target.copy(e.target0),e.object.position.copy(e.position0),e.object.zoom=e.zoom0,e.object.updateProjectionMatrix(),e.dispatchEvent(Re),e.update(),i=o.NONE},this.update=function(){const t=new d,a=new Se().setFromUnitVectors(s.up,new d(0,1,0)),l=a.clone().invert(),h=new d,p=new Se,S=new d,b=2*Math.PI;return function(et=null){const Ce=e.object.position;t.copy(Ce).sub(e.target),t.applyQuaternion(a),n.setFromVector3(t),e.autoRotate&&i===o.NONE&&N(je(et)),e.enableDamping?(n.theta+=u.theta*e.dampingFactor,n.phi+=u.phi*e.dampingFactor):(n.theta+=u.theta,n.phi+=u.phi);let M=e.minAzimuthAngle,w=e.maxAzimuthAngle;isFinite(M)&&isFinite(w)&&(M<-Math.PI?M+=b:M>Math.PI&&(M-=b),w<-Math.PI?w+=b:w>Math.PI&&(w-=b),M<=w?n.theta=Math.max(M,Math.min(w,n.theta)):n.theta=n.theta>(M+w)/2?Math.max(M,n.theta):Math.min(w,n.theta)),n.phi=Math.max(e.minPolarAngle,Math.min(e.maxPolarAngle,n.phi)),n.makeSafe(),e.enableDamping===!0?e.target.addScaledVector(y,e.dampingFactor):e.target.add(y),e.target.sub(e.cursor),e.target.clampLength(e.minTargetRadius,e.maxTargetRadius),e.target.add(e.cursor),e.zoomToCursor&&K||e.object.isOrthographicCamera?n.radius=se(n.radius):n.radius=se(n.radius*v),t.setFromSpherical(n),t.applyQuaternion(l),Ce.copy(e.target).add(t),e.object.lookAt(e.target),e.enableDamping===!0?(u.theta*=1-e.dampingFactor,u.phi*=1-e.dampingFactor,y.multiplyScalar(1-e.dampingFactor)):(u.set(0,0,0),y.set(0,0,0));let ae=!1;if(e.zoomToCursor&&K){let I=null;if(e.object.isPerspectiveCamera){const F=t.length();I=se(F*v);const Z=F-I;e.object.position.addScaledVector(le,Z),e.object.updateMatrixWorld()}else if(e.object.isOrthographicCamera){const F=new d(C.x,C.y,0);F.unproject(e.object),e.object.zoom=Math.max(e.minZoom,Math.min(e.maxZoom,e.object.zoom/v)),e.object.updateProjectionMatrix(),ae=!0;const Z=new d(C.x,C.y,0);Z.unproject(e.object),e.object.position.sub(Z).add(F),e.object.updateMatrixWorld(),I=t.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),e.zoomToCursor=!1;I!==null&&(this.screenSpacePanning?e.target.set(0,0,-1).transformDirection(e.object.matrix).multiplyScalar(I).add(e.object.position):(W.origin.copy(e.object.position),W.direction.set(0,0,-1).transformDirection(e.object.matrix),Math.abs(e.object.up.dot(W.direction))<ft?s.lookAt(e.target):(Oe.setFromNormalAndCoplanarPoint(e.object.up,e.target),W.intersectPlane(Oe,e.target))))}else e.object.isOrthographicCamera&&(e.object.zoom=Math.max(e.minZoom,Math.min(e.maxZoom,e.object.zoom/v)),e.object.updateProjectionMatrix(),ae=!0);return v=1,K=!1,ae||h.distanceToSquared(e.object.position)>c||8*(1-p.dot(e.object.quaternion))>c||S.distanceToSquared(e.target)>0?(e.dispatchEvent(Re),h.copy(e.object.position),p.copy(e.object.quaternion),S.copy(e.target),!0):!1}}(),this.dispose=function(){e.domElement.removeEventListener("contextmenu",we),e.domElement.removeEventListener("pointerdown",xe),e.domElement.removeEventListener("pointercancel",B),e.domElement.removeEventListener("wheel",ve),e.domElement.removeEventListener("pointermove",ie),e.domElement.removeEventListener("pointerup",B),e._domElementKeyEvents!==null&&(e._domElementKeyEvents.removeEventListener("keydown",oe),e._domElementKeyEvents=null)};const e=this,o={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let i=o.NONE;const c=1e-6,n=new Pe,u=new Pe;let v=1;const y=new d,m=new f,T=new f,x=new f,P=new f,D=new f,A=new f,O=new f,_=new f,R=new f,le=new d,C=new f;let K=!1;const g=[],V={};let $=!1;function je(t){return t!==null?2*Math.PI/60*e.autoRotateSpeed*t:2*Math.PI/60/60*e.autoRotateSpeed}function Q(t){const a=Math.abs(t*.01);return Math.pow(.95,e.zoomSpeed*a)}function N(t){u.theta-=t}function X(t){u.phi-=t}const ce=function(){const t=new d;return function(l,h){t.setFromMatrixColumn(h,0),t.multiplyScalar(-l),y.add(t)}}(),ue=function(){const t=new d;return function(l,h){e.screenSpacePanning===!0?t.setFromMatrixColumn(h,1):(t.setFromMatrixColumn(h,0),t.crossVectors(e.object.up,t)),t.multiplyScalar(l),y.add(t)}}(),L=function(){const t=new d;return function(l,h){const p=e.domElement;if(e.object.isPerspectiveCamera){const S=e.object.position;t.copy(S).sub(e.target);let b=t.length();b*=Math.tan(e.object.fov/2*Math.PI/180),ce(2*l*b/p.clientHeight,e.object.matrix),ue(2*h*b/p.clientHeight,e.object.matrix)}else e.object.isOrthographicCamera?(ce(l*(e.object.right-e.object.left)/e.object.zoom/p.clientWidth,e.object.matrix),ue(h*(e.object.top-e.object.bottom)/e.object.zoom/p.clientHeight,e.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),e.enablePan=!1)}}();function ee(t){e.object.isPerspectiveCamera||e.object.isOrthographicCamera?v/=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),e.enableZoom=!1)}function he(t){e.object.isPerspectiveCamera||e.object.isOrthographicCamera?v*=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),e.enableZoom=!1)}function te(t,a){if(!e.zoomToCursor)return;K=!0;const l=e.domElement.getBoundingClientRect(),h=t-l.left,p=a-l.top,S=l.width,b=l.height;C.x=h/S*2-1,C.y=-(p/b)*2+1,le.set(C.x,C.y,1).unproject(e.object).sub(e.object.position).normalize()}function se(t){return Math.max(e.minDistance,Math.min(e.maxDistance,t))}function fe(t){m.set(t.clientX,t.clientY)}function ke(t){te(t.clientX,t.clientX),O.set(t.clientX,t.clientY)}function de(t){P.set(t.clientX,t.clientY)}function ze(t){T.set(t.clientX,t.clientY),x.subVectors(T,m).multiplyScalar(e.rotateSpeed);const a=e.domElement;N(2*Math.PI*x.x/a.clientHeight),X(2*Math.PI*x.y/a.clientHeight),m.copy(T),e.update()}function Ne(t){_.set(t.clientX,t.clientY),R.subVectors(_,O),R.y>0?ee(Q(R.y)):R.y<0&&he(Q(R.y)),O.copy(_),e.update()}function Be(t){D.set(t.clientX,t.clientY),A.subVectors(D,P).multiplyScalar(e.panSpeed),L(A.x,A.y),P.copy(D),e.update()}function Ie(t){te(t.clientX,t.clientY),t.deltaY<0?he(Q(t.deltaY)):t.deltaY>0&&ee(Q(t.deltaY)),e.update()}function Fe(t){let a=!1;switch(t.code){case e.keys.UP:t.ctrlKey||t.metaKey||t.shiftKey?X(2*Math.PI*e.rotateSpeed/e.domElement.clientHeight):L(0,e.keyPanSpeed),a=!0;break;case e.keys.BOTTOM:t.ctrlKey||t.metaKey||t.shiftKey?X(-2*Math.PI*e.rotateSpeed/e.domElement.clientHeight):L(0,-e.keyPanSpeed),a=!0;break;case e.keys.LEFT:t.ctrlKey||t.metaKey||t.shiftKey?N(2*Math.PI*e.rotateSpeed/e.domElement.clientHeight):L(e.keyPanSpeed,0),a=!0;break;case e.keys.RIGHT:t.ctrlKey||t.metaKey||t.shiftKey?N(-2*Math.PI*e.rotateSpeed/e.domElement.clientHeight):L(-e.keyPanSpeed,0),a=!0;break}a&&(t.preventDefault(),e.update())}function me(t){if(g.length===1)m.set(t.pageX,t.pageY);else{const a=U(t),l=.5*(t.pageX+a.x),h=.5*(t.pageY+a.y);m.set(l,h)}}function pe(t){if(g.length===1)P.set(t.pageX,t.pageY);else{const a=U(t),l=.5*(t.pageX+a.x),h=.5*(t.pageY+a.y);P.set(l,h)}}function ge(t){const a=U(t),l=t.pageX-a.x,h=t.pageY-a.y,p=Math.sqrt(l*l+h*h);O.set(0,p)}function He(t){e.enableZoom&&ge(t),e.enablePan&&pe(t)}function Ye(t){e.enableZoom&&ge(t),e.enableRotate&&me(t)}function be(t){if(g.length==1)T.set(t.pageX,t.pageY);else{const l=U(t),h=.5*(t.pageX+l.x),p=.5*(t.pageY+l.y);T.set(h,p)}x.subVectors(T,m).multiplyScalar(e.rotateSpeed);const a=e.domElement;N(2*Math.PI*x.x/a.clientHeight),X(2*Math.PI*x.y/a.clientHeight),m.copy(T)}function Te(t){if(g.length===1)D.set(t.pageX,t.pageY);else{const a=U(t),l=.5*(t.pageX+a.x),h=.5*(t.pageY+a.y);D.set(l,h)}A.subVectors(D,P).multiplyScalar(e.panSpeed),L(A.x,A.y),P.copy(D)}function ye(t){const a=U(t),l=t.pageX-a.x,h=t.pageY-a.y,p=Math.sqrt(l*l+h*h);_.set(0,p),R.set(0,Math.pow(_.y/O.y,e.zoomSpeed)),ee(R.y),O.copy(_);const S=(t.pageX+a.x)*.5,b=(t.pageY+a.y)*.5;te(S,b)}function Ke(t){e.enableZoom&&ye(t),e.enablePan&&Te(t)}function Ve(t){e.enableZoom&&ye(t),e.enableRotate&&be(t)}function xe(t){e.enabled!==!1&&(g.length===0&&(e.domElement.setPointerCapture(t.pointerId),e.domElement.addEventListener("pointermove",ie),e.domElement.addEventListener("pointerup",B)),Je(t),t.pointerType==="touch"?Ge(t):Qe(t))}function ie(t){e.enabled!==!1&&(t.pointerType==="touch"?qe(t):Xe(t))}function B(t){$e(t),g.length===0&&(e.domElement.releasePointerCapture(t.pointerId),e.domElement.removeEventListener("pointermove",ie),e.domElement.removeEventListener("pointerup",B)),e.dispatchEvent(Ae),i=o.NONE}function Qe(t){let a;switch(t.button){case 0:a=e.mouseButtons.LEFT;break;case 1:a=e.mouseButtons.MIDDLE;break;case 2:a=e.mouseButtons.RIGHT;break;default:a=-1}switch(a){case j.DOLLY:if(e.enableZoom===!1)return;ke(t),i=o.DOLLY;break;case j.ROTATE:if(t.ctrlKey||t.metaKey||t.shiftKey){if(e.enablePan===!1)return;de(t),i=o.PAN}else{if(e.enableRotate===!1)return;fe(t),i=o.ROTATE}break;case j.PAN:if(t.ctrlKey||t.metaKey||t.shiftKey){if(e.enableRotate===!1)return;fe(t),i=o.ROTATE}else{if(e.enablePan===!1)return;de(t),i=o.PAN}break;default:i=o.NONE}i!==o.NONE&&e.dispatchEvent(re)}function Xe(t){switch(i){case o.ROTATE:if(e.enableRotate===!1)return;ze(t);break;case o.DOLLY:if(e.enableZoom===!1)return;Ne(t);break;case o.PAN:if(e.enablePan===!1)return;Be(t);break}}function ve(t){e.enabled===!1||e.enableZoom===!1||i!==o.NONE||(t.preventDefault(),e.dispatchEvent(re),Ie(Ze(t)),e.dispatchEvent(Ae))}function Ze(t){const a=t.deltaMode,l={clientX:t.clientX,clientY:t.clientY,deltaY:t.deltaY};switch(a){case 1:l.deltaY*=16;break;case 2:l.deltaY*=100;break}return t.ctrlKey&&!$&&(l.deltaY*=10),l}function We(t){t.key==="Control"&&($=!0,document.addEventListener("keyup",Me,{passive:!0,capture:!0}))}function Me(t){t.key==="Control"&&($=!1,document.removeEventListener("keyup",Me,{passive:!0,capture:!0}))}function oe(t){e.enabled===!1||e.enablePan===!1||Fe(t)}function Ge(t){switch(Ee(t),g.length){case 1:switch(e.touches.ONE){case k.ROTATE:if(e.enableRotate===!1)return;me(t),i=o.TOUCH_ROTATE;break;case k.PAN:if(e.enablePan===!1)return;pe(t),i=o.TOUCH_PAN;break;default:i=o.NONE}break;case 2:switch(e.touches.TWO){case k.DOLLY_PAN:if(e.enableZoom===!1&&e.enablePan===!1)return;He(t),i=o.TOUCH_DOLLY_PAN;break;case k.DOLLY_ROTATE:if(e.enableZoom===!1&&e.enableRotate===!1)return;Ye(t),i=o.TOUCH_DOLLY_ROTATE;break;default:i=o.NONE}break;default:i=o.NONE}i!==o.NONE&&e.dispatchEvent(re)}function qe(t){switch(Ee(t),i){case o.TOUCH_ROTATE:if(e.enableRotate===!1)return;be(t),e.update();break;case o.TOUCH_PAN:if(e.enablePan===!1)return;Te(t),e.update();break;case o.TOUCH_DOLLY_PAN:if(e.enableZoom===!1&&e.enablePan===!1)return;Ke(t),e.update();break;case o.TOUCH_DOLLY_ROTATE:if(e.enableZoom===!1&&e.enableRotate===!1)return;Ve(t),e.update();break;default:i=o.NONE}}function we(t){e.enabled!==!1&&t.preventDefault()}function Je(t){g.push(t.pointerId)}function $e(t){delete V[t.pointerId];for(let a=0;a<g.length;a++)if(g[a]==t.pointerId){g.splice(a,1);return}}function Ee(t){let a=V[t.pointerId];a===void 0&&(a=new f,V[t.pointerId]=a),a.set(t.pageX,t.pageY)}function U(t){const a=t.pointerId===g[0]?g[1]:g[0];return V[a]}e.domElement.addEventListener("contextmenu",we),e.domElement.addEventListener("pointerdown",xe),e.domElement.addEventListener("pointercancel",B),e.domElement.addEventListener("wheel",ve,{passive:!1}),document.addEventListener("keydown",We,{passive:!0,capture:!0}),this.update()}}const Le={name:"CopyShader",uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;


		}`};class Y{constructor(){this.isPass=!0,this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}setSize(){}render(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}dispose(){}}const dt=new at(-1,1,1,-1,0,1);class mt extends nt{constructor(){super(),this.setAttribute("position",new De([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new De([0,2,0,0,2,0],2))}}const pt=new mt;class Ue{constructor(s){this._mesh=new rt(pt,s)}dispose(){this._mesh.geometry.dispose()}render(s){s.render(this._mesh,dt)}get material(){return this._mesh.material}set material(s){this._mesh.material=s}}class gt extends Y{constructor(s,r){super(),this.textureID=r!==void 0?r:"tDiffuse",s instanceof z?(this.uniforms=s.uniforms,this.material=s):s&&(this.uniforms=ne.clone(s.uniforms),this.material=new z({name:s.name!==void 0?s.name:"unspecified",defines:Object.assign({},s.defines),uniforms:this.uniforms,vertexShader:s.vertexShader,fragmentShader:s.fragmentShader})),this.fsQuad=new Ue(this.material)}render(s,r,e){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=e.texture),this.fsQuad.material=this.material,this.renderToScreen?(s.setRenderTarget(null),this.fsQuad.render(s)):(s.setRenderTarget(r),this.clear&&s.clear(s.autoClearColor,s.autoClearDepth,s.autoClearStencil),this.fsQuad.render(s))}dispose(){this.material.dispose(),this.fsQuad.dispose()}}class _e extends Y{constructor(s,r){super(),this.scene=s,this.camera=r,this.clear=!0,this.needsSwap=!1,this.inverse=!1}render(s,r,e){const o=s.getContext(),i=s.state;i.buffers.color.setMask(!1),i.buffers.depth.setMask(!1),i.buffers.color.setLocked(!0),i.buffers.depth.setLocked(!0);let c,n;this.inverse?(c=0,n=1):(c=1,n=0),i.buffers.stencil.setTest(!0),i.buffers.stencil.setOp(o.REPLACE,o.REPLACE,o.REPLACE),i.buffers.stencil.setFunc(o.ALWAYS,c,4294967295),i.buffers.stencil.setClear(n),i.buffers.stencil.setLocked(!0),s.setRenderTarget(e),this.clear&&s.clear(),s.render(this.scene,this.camera),s.setRenderTarget(r),this.clear&&s.clear(),s.render(this.scene,this.camera),i.buffers.color.setLocked(!1),i.buffers.depth.setLocked(!1),i.buffers.color.setMask(!0),i.buffers.depth.setMask(!0),i.buffers.stencil.setLocked(!1),i.buffers.stencil.setFunc(o.EQUAL,1,4294967295),i.buffers.stencil.setOp(o.KEEP,o.KEEP,o.KEEP),i.buffers.stencil.setLocked(!0)}}class bt extends Y{constructor(){super(),this.needsSwap=!1}render(s){s.state.buffers.stencil.setLocked(!1),s.state.buffers.stencil.setTest(!1)}}class Mt{constructor(s,r){if(this.renderer=s,this._pixelRatio=s.getPixelRatio(),r===void 0){const e=s.getSize(new f);this._width=e.width,this._height=e.height,r=new G(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:q}),r.texture.name="EffectComposer.rt1"}else this._width=r.width,this._height=r.height;this.renderTarget1=r,this.renderTarget2=r.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],this.copyPass=new gt(Le),this.copyPass.material.blending=lt,this.clock=new ct}swapBuffers(){const s=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=s}addPass(s){this.passes.push(s),s.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}insertPass(s,r){this.passes.splice(r,0,s),s.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}removePass(s){const r=this.passes.indexOf(s);r!==-1&&this.passes.splice(r,1)}isLastEnabledPass(s){for(let r=s+1;r<this.passes.length;r++)if(this.passes[r].enabled)return!1;return!0}render(s){s===void 0&&(s=this.clock.getDelta());const r=this.renderer.getRenderTarget();let e=!1;for(let o=0,i=this.passes.length;o<i;o++){const c=this.passes[o];if(c.enabled!==!1){if(c.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(o),c.render(this.renderer,this.writeBuffer,this.readBuffer,s,e),c.needsSwap){if(e){const n=this.renderer.getContext(),u=this.renderer.state.buffers.stencil;u.setFunc(n.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,s),u.setFunc(n.EQUAL,1,4294967295)}this.swapBuffers()}_e!==void 0&&(c instanceof _e?e=!0:c instanceof bt&&(e=!1))}}this.renderer.setRenderTarget(r)}reset(s){if(s===void 0){const r=this.renderer.getSize(new f);this._pixelRatio=this.renderer.getPixelRatio(),this._width=r.width,this._height=r.height,s=this.renderTarget1.clone(),s.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=s,this.renderTarget2=s.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2}setSize(s,r){this._width=s,this._height=r;const e=this._width*this._pixelRatio,o=this._height*this._pixelRatio;this.renderTarget1.setSize(e,o),this.renderTarget2.setSize(e,o);for(let i=0;i<this.passes.length;i++)this.passes[i].setSize(e,o)}setPixelRatio(s){this._pixelRatio=s,this.setSize(this._width,this._height)}dispose(){this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.copyPass.dispose()}}class wt extends Y{constructor(s,r,e=null,o=null,i=null){super(),this.scene=s,this.camera=r,this.overrideMaterial=e,this.clearColor=o,this.clearAlpha=i,this.clear=!0,this.clearDepth=!1,this.needsSwap=!1,this._oldClearColor=new J}render(s,r,e){const o=s.autoClear;s.autoClear=!1;let i,c;this.overrideMaterial!==null&&(c=this.scene.overrideMaterial,this.scene.overrideMaterial=this.overrideMaterial),this.clearColor!==null&&(s.getClearColor(this._oldClearColor),s.setClearColor(this.clearColor)),this.clearAlpha!==null&&(i=s.getClearAlpha(),s.setClearAlpha(this.clearAlpha)),this.clearDepth==!0&&s.clearDepth(),s.setRenderTarget(this.renderToScreen?null:e),this.clear===!0&&s.clear(s.autoClearColor,s.autoClearDepth,s.autoClearStencil),s.render(this.scene,this.camera),this.clearColor!==null&&s.setClearColor(this._oldClearColor),this.clearAlpha!==null&&s.setClearAlpha(i),this.overrideMaterial!==null&&(this.scene.overrideMaterial=c),s.autoClear=o}}const Tt={name:"LuminosityHighPassShader",shaderID:"luminosityHighPass",uniforms:{tDiffuse:{value:null},luminosityThreshold:{value:1},smoothWidth:{value:1},defaultColor:{value:new J(0)},defaultOpacity:{value:0}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;

			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform sampler2D tDiffuse;
		uniform vec3 defaultColor;
		uniform float defaultOpacity;
		uniform float luminosityThreshold;
		uniform float smoothWidth;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );

			vec3 luma = vec3( 0.299, 0.587, 0.114 );

			float v = dot( texel.xyz, luma );

			vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );

			float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );

			gl_FragColor = mix( outputColor, texel, alpha );

		}`};class H extends Y{constructor(s,r,e,o){super(),this.strength=r!==void 0?r:1,this.radius=e,this.threshold=o,this.resolution=s!==void 0?new f(s.x,s.y):new f(256,256),this.clearColor=new J(0,0,0),this.renderTargetsHorizontal=[],this.renderTargetsVertical=[],this.nMips=5;let i=Math.round(this.resolution.x/2),c=Math.round(this.resolution.y/2);this.renderTargetBright=new G(i,c,{type:q}),this.renderTargetBright.texture.name="UnrealBloomPass.bright",this.renderTargetBright.texture.generateMipmaps=!1;for(let m=0;m<this.nMips;m++){const T=new G(i,c,{type:q});T.texture.name="UnrealBloomPass.h"+m,T.texture.generateMipmaps=!1,this.renderTargetsHorizontal.push(T);const x=new G(i,c,{type:q});x.texture.name="UnrealBloomPass.v"+m,x.texture.generateMipmaps=!1,this.renderTargetsVertical.push(x),i=Math.round(i/2),c=Math.round(c/2)}const n=Tt;this.highPassUniforms=ne.clone(n.uniforms),this.highPassUniforms.luminosityThreshold.value=o,this.highPassUniforms.smoothWidth.value=.01,this.materialHighPassFilter=new z({uniforms:this.highPassUniforms,vertexShader:n.vertexShader,fragmentShader:n.fragmentShader}),this.separableBlurMaterials=[];const u=[3,5,7,9,11];i=Math.round(this.resolution.x/2),c=Math.round(this.resolution.y/2);for(let m=0;m<this.nMips;m++)this.separableBlurMaterials.push(this.getSeperableBlurMaterial(u[m])),this.separableBlurMaterials[m].uniforms.invSize.value=new f(1/i,1/c),i=Math.round(i/2),c=Math.round(c/2);this.compositeMaterial=this.getCompositeMaterial(this.nMips),this.compositeMaterial.uniforms.blurTexture1.value=this.renderTargetsVertical[0].texture,this.compositeMaterial.uniforms.blurTexture2.value=this.renderTargetsVertical[1].texture,this.compositeMaterial.uniforms.blurTexture3.value=this.renderTargetsVertical[2].texture,this.compositeMaterial.uniforms.blurTexture4.value=this.renderTargetsVertical[3].texture,this.compositeMaterial.uniforms.blurTexture5.value=this.renderTargetsVertical[4].texture,this.compositeMaterial.uniforms.bloomStrength.value=r,this.compositeMaterial.uniforms.bloomRadius.value=.1;const v=[1,.8,.6,.4,.2];this.compositeMaterial.uniforms.bloomFactors.value=v,this.bloomTintColors=[new d(1,1,1),new d(1,1,1),new d(1,1,1),new d(1,1,1),new d(1,1,1)],this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors;const y=Le;this.copyUniforms=ne.clone(y.uniforms),this.blendMaterial=new z({uniforms:this.copyUniforms,vertexShader:y.vertexShader,fragmentShader:y.fragmentShader,blending:ut,depthTest:!1,depthWrite:!1,transparent:!0}),this.enabled=!0,this.needsSwap=!1,this._oldClearColor=new J,this.oldClearAlpha=1,this.basic=new ht,this.fsQuad=new Ue(null)}dispose(){for(let s=0;s<this.renderTargetsHorizontal.length;s++)this.renderTargetsHorizontal[s].dispose();for(let s=0;s<this.renderTargetsVertical.length;s++)this.renderTargetsVertical[s].dispose();this.renderTargetBright.dispose();for(let s=0;s<this.separableBlurMaterials.length;s++)this.separableBlurMaterials[s].dispose();this.compositeMaterial.dispose(),this.blendMaterial.dispose(),this.basic.dispose(),this.fsQuad.dispose()}setSize(s,r){let e=Math.round(s/2),o=Math.round(r/2);this.renderTargetBright.setSize(e,o);for(let i=0;i<this.nMips;i++)this.renderTargetsHorizontal[i].setSize(e,o),this.renderTargetsVertical[i].setSize(e,o),this.separableBlurMaterials[i].uniforms.invSize.value=new f(1/e,1/o),e=Math.round(e/2),o=Math.round(o/2)}render(s,r,e,o,i){s.getClearColor(this._oldClearColor),this.oldClearAlpha=s.getClearAlpha();const c=s.autoClear;s.autoClear=!1,s.setClearColor(this.clearColor,0),i&&s.state.buffers.stencil.setTest(!1),this.renderToScreen&&(this.fsQuad.material=this.basic,this.basic.map=e.texture,s.setRenderTarget(null),s.clear(),this.fsQuad.render(s)),this.highPassUniforms.tDiffuse.value=e.texture,this.highPassUniforms.luminosityThreshold.value=this.threshold,this.fsQuad.material=this.materialHighPassFilter,s.setRenderTarget(this.renderTargetBright),s.clear(),this.fsQuad.render(s);let n=this.renderTargetBright;for(let u=0;u<this.nMips;u++)this.fsQuad.material=this.separableBlurMaterials[u],this.separableBlurMaterials[u].uniforms.colorTexture.value=n.texture,this.separableBlurMaterials[u].uniforms.direction.value=H.BlurDirectionX,s.setRenderTarget(this.renderTargetsHorizontal[u]),s.clear(),this.fsQuad.render(s),this.separableBlurMaterials[u].uniforms.colorTexture.value=this.renderTargetsHorizontal[u].texture,this.separableBlurMaterials[u].uniforms.direction.value=H.BlurDirectionY,s.setRenderTarget(this.renderTargetsVertical[u]),s.clear(),this.fsQuad.render(s),n=this.renderTargetsVertical[u];this.fsQuad.material=this.compositeMaterial,this.compositeMaterial.uniforms.bloomStrength.value=this.strength,this.compositeMaterial.uniforms.bloomRadius.value=this.radius,this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,s.setRenderTarget(this.renderTargetsHorizontal[0]),s.clear(),this.fsQuad.render(s),this.fsQuad.material=this.blendMaterial,this.copyUniforms.tDiffuse.value=this.renderTargetsHorizontal[0].texture,i&&s.state.buffers.stencil.setTest(!0),this.renderToScreen?(s.setRenderTarget(null),this.fsQuad.render(s)):(s.setRenderTarget(e),this.fsQuad.render(s)),s.setClearColor(this._oldClearColor,this.oldClearAlpha),s.autoClear=c}getSeperableBlurMaterial(s){const r=[];for(let e=0;e<s;e++)r.push(.39894*Math.exp(-.5*e*e/(s*s))/s);return new z({defines:{KERNEL_RADIUS:s},uniforms:{colorTexture:{value:null},invSize:{value:new f(.5,.5)},direction:{value:new f(.5,.5)},gaussianCoefficients:{value:r}},vertexShader:`varying vec2 vUv;
				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`#include <common>
				varying vec2 vUv;
				uniform sampler2D colorTexture;
				uniform vec2 invSize;
				uniform vec2 direction;
				uniform float gaussianCoefficients[KERNEL_RADIUS];

				void main() {
					float weightSum = gaussianCoefficients[0];
					vec3 diffuseSum = texture2D( colorTexture, vUv ).rgb * weightSum;
					for( int i = 1; i < KERNEL_RADIUS; i ++ ) {
						float x = float(i);
						float w = gaussianCoefficients[i];
						vec2 uvOffset = direction * invSize * x;
						vec3 sample1 = texture2D( colorTexture, vUv + uvOffset ).rgb;
						vec3 sample2 = texture2D( colorTexture, vUv - uvOffset ).rgb;
						diffuseSum += (sample1 + sample2) * w;
						weightSum += 2.0 * w;
					}
					gl_FragColor = vec4(diffuseSum/weightSum, 1.0);
				}`})}getCompositeMaterial(s){return new z({defines:{NUM_MIPS:s},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:`varying vec2 vUv;
				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`varying vec2 vUv;
				uniform sampler2D blurTexture1;
				uniform sampler2D blurTexture2;
				uniform sampler2D blurTexture3;
				uniform sampler2D blurTexture4;
				uniform sampler2D blurTexture5;
				uniform float bloomStrength;
				uniform float bloomRadius;
				uniform float bloomFactors[NUM_MIPS];
				uniform vec3 bloomTintColors[NUM_MIPS];

				float lerpBloomFactor(const in float factor) {
					float mirrorFactor = 1.2 - factor;
					return mix(factor, mirrorFactor, bloomRadius);
				}

				void main() {
					gl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +
						lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +
						lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +
						lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +
						lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );
				}`})}}H.BlurDirectionX=new f(1,0);H.BlurDirectionY=new f(0,1);export{Mt as E,vt as O,wt as R,H as U};
